#!/bin/bash

# version 1.1

cmd=$(basename $0)
root=$(git rev-parse --show-toplevel)

dotgit(){
	echo $root/.git/$1
}

scriptpath(){
	echo $(cd $(dirname $0); pwd)/git-etc-add-package
}

install_hook(){
	echo "Installing prepare-commit-msg hook"
	ln -s $(scriptpath) $(dotgit hooks/prepare-commit-msg)
}

verify_hook(){
	local hook=$(dotgit hooks/prepare-commit-msg)

	# test if user wants to skip hook verification
	if [[ $(git config "etc-add-package.verify-hook") = 'false' ]]; then
		return
	fi

	# no hook exists, install it
	if [[ ! -e "$hook" ]]; then
		install_hook
		return
	fi

	# symlink exists
	if [[ -L "$hook" ]]; then
		if [[ $(readlink "$hook") = $(scriptpath) ]]; then
			return # hook installed, all ok
		fi
	fi

	# at this point whatever exists is not our hook, bail out
	echo "\`.git/hooks/prepare-commit-msg' already exists but is not a symlink to this" > /dev/stderr
	echo "script, autogenerated commit messages will not work." > /dev/stderr
	echo > /dev/stderr
	echo "Use \`git config etc-add-package.verify-hook false' to squelch this message." > /dev/stderr
	echo > /dev/stderr
}

case "$cmd" in
	prepare-commit-msg)
		# prepend predefined message if
		# 1) user set a custom message with -m or git has some message already (e.g. merge)
		# 2) a message actually exists
		if [[ -z "$2" && -e $(dotgit PACKAGE_MSG) ]]; then
			tmp=$(tempfile)
			cat $(dotgit PACKAGE_MSG) $1 >"$tmp" && mv "$tmp" $1
		fi
		;;

	git-etc-add-package)
		verify_hook

		# usage
		if [[ $# != 1 ]]; then
			echo "for a given file, find the ebuild it belongs to and add all files for that ebuild"
			echo "usage: git etc-add-package FILENAME"
			exit 1
		fi

		# determine what package this file belongs to
		echo -n "Searching for package .. "
		package=$(equery -qC belongs -e "$@")
		if [[ $? != 0 ]]; then
			echo "not found"
			exit 1
		fi
		echo $package

		# prepare a predefined commit message
		echo -e "# The following package was added:\n\n$package" > $(dotgit PACKAGE_MSG)

		# add all files in /etc belonging to this package
		echo "Finding all files in /etc"
		equery files -f obj,sym "$package" | grep '^/etc' | \
			while read line; do
				echo $line
				git add $line
			done
		;;

	*)
		echo "git-etc-add-package: unknown command $0" > /dev/stderr
		exit 1
esac
