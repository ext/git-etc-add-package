#!/bin/bash

# version 1.3

cmd=$(basename $0)
root=$(git rev-parse --show-toplevel)

dotgit(){
	echo $root/.git/$1
}

scriptpath(){
	echo $(cd $(dirname $0); pwd)/git-etc-add-package
}

install_hook(){
	local filename=$1
	echo "Installing $filename hook"
	ln -s $(scriptpath) $(dotgit hooks/$filename)
}

verify_hook(){
	# test if user wants to skip hook verification
	if [[ $(git config "etc-add-package.verify-hook") = 'false' ]]; then
		return
	fi

	local error="no"
	for filename in prepare-commit-msg commit-msg; do
		local hook=$(dotgit hooks/$filename)

		# no hook exists, install it
		if [[ ! -e "$hook" ]]; then
			install_hook $filename
			continue
		fi

		# symlink exists
		if [[ -L "$hook" ]]; then
			if [[ $(readlink "$hook") = $(scriptpath) ]]; then
				continue # hook installed, all ok
			fi
		fi

		# at this point whatever exists is not our hook, bail out
		echo "\`.git/hooks/$filename' already exists but is not a symlink to this" > /dev/stderr
		echo "script, autogenerated commit messages will not work." > /dev/stderr
		error=true
	done

	if [[ "$error" = "true" ]]; then
		echo > /dev/stderr
		echo "Use \`git config etc-add-package.verify-hook false' to squelch this message." > /dev/stderr
		echo > /dev/stderr
	fi
}

gitignore(){
	cat <<EOF
*~
.keep*

/.pwd.lock
/blkid.tab
/blkid.tab.old
/csh.env
/dhcpcd.duid
/env.d
/group-
/gshadow
/gshadow-
/ld.so.cache
/machine-id
/mtab
/mtab.fuselock
/passwd-
/portage/savedconfig
/profile.env
/shadow
/shadow-
/ssh/ssh_host_*_key
/ssh/ssh_host_key
/udev/hwdb.bin
EOF
}

case "$cmd" in
	prepare-commit-msg)
		# prepend predefined message if
		# 1) user set a custom message with -m or git has some message already (e.g. merge)
		# 2) a message actually exists
		if [[ -z "$2" && -e $(dotgit PACKAGE_MSG) ]]; then
			tmp=$(tempfile)
			cat $(dotgit PACKAGE_MSG) $1 >"$tmp" && mv "$tmp" $1
		fi
		;;

	commit-msg)
		rm -f $(dotgit PACKAGE_MSG)
		;;

	git-etc-add-package)
		verify_hook

		# usage
		if [[ $# != 1 ]]; then
			echo "for a given file, find the ebuild it belongs to and add all files for that ebuild"
			echo "usage: git etc-add-package FILENAME"
			echo "usage: git etc-add-package --gitignore"
			exit 1
		fi

		# gitignore
		if [[ "$1" == "--gitignore" ]]; then
			gitignore
			exit 0
		fi

		# determine what package this file belongs to
		echo -n "Searching for package .. "
		package=$(equery -qC belongs -e "$@")
		if [[ $? != 0 ]]; then
			echo "not found"
			exit 1
		fi
		echo $package

		# prepare a predefined commit message
		echo -e "# The following package was added:\n\n$package" > $(dotgit PACKAGE_MSG)

		# add all files in /etc belonging to this package
		echo "Finding all files in /etc"
		equery files -f obj,sym "$package" | grep '^/etc' | \
			while read line; do
				echo $line
				git add $line
			done
		;;

	*)
		echo "git-etc-add-package: unknown command $0" > /dev/stderr
		exit 1
esac
